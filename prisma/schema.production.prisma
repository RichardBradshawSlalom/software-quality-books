generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_DATABASE_URL")
}

model Book {
  id          String   @id @default(cuid())
  title       String
  description String
  summary     String
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  reviews     Review[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  books         Book[]
  reviews       Review[]
  profile       Profile?  // One-to-one relation
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Profile {
  id            String    @id @default(cuid())
  name          String?
  dateOfBirth   DateTime?
  image         String?
  bio           String?
  bluesky       String?
  linkedin      String?
  github        String?
  website       String?
  userId        String    @unique  // Foreign key
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookId    String
  userId    String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Add unique constraint
  @@unique([userId, bookId], name: "userBookReview")
}
